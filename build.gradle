version '2.0'



apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'eclipse'

apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'io.github.robwin.swagger2markup'
apply plugin: 'org.asciidoctor.convert'

//指定gradle wrapper版本
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task download(type: Copy) {  
  from configurations.runtime  
  into 'g:\\gradlelib' //下载后存放jar包的位置  
}  

configurations {
    mybatisGenerator


}

//配置插件仓库
buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {

        classpath 'org.akhikhl.gretty:gretty:1.2.4'
        classpath 'mysql:mysql-connector-java:5.1.36'
        classpath "org.flywaydb:flyway-gradle-plugin:4.0"

        //swagger2markup
        classpath 'io.github.robwin:swagger2markup-gradle-plugin:0.9.2'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
        classpath 'io.github.robwin:swagger2markup-gradle-plugin:0.9.2'
        classpath 'javax.servlet:jstl:1.2'
        classpath 'taglibs:standard:1.1.2'
    }


}

//gretty设置
gretty {
    port = 8080
    contextPath = "/zyx"
}


ext {
    if (!project.hasProperty("env")) {
        println '没有配置数据环境，默认使用 开发环境'
        env = "dev"

    }
    println "使用数据库环境为:${project['env']}"

    asciiDocOutputDir = file("${buildDir}/asciidoc")
    println asciiDocOutputDir.absolutePath
    swaggerOutputDir = file("${buildDir}/swagger")
    println swaggerOutputDir.absolutePath

}

def getDbProperties = {
    def properties = new Properties()
    def dbPropertiesPath = sourceSets.main.resources.srcDirs[1].path;
    file("$dbPropertiesPath/jdbc-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }

    properties;

}






sourceSets {
    main {
        resources {
            srcDir("src/main/resources")

            if (project['env'] == 'dev') {
                srcDir("src/main/resources-dev")
            } else if (project['env'] == 'prod') {
                srcDir('src/main/resources-prod')
            }

        }


    }


}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
}

convertSwagger2markup {
    dependsOn clean,test
    inputDir swaggerOutputDir
    examplesDir asciiDocOutputDir
    pathsGroupedBy io.github.robwin.swagger2markup.GroupBy.TAGS
}


asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            'source-highlighter': 'coderay',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}



flyway {
    def prop = getDbProperties()
    user = prop.getProperty('jdbc.user')
    url = prop.getProperty('jdbc.url')
    password = prop.getProperty('jdbc.pass')
    locations = ["filesystem:db/migration"]

}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

//统一编码为utf-8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//依赖
dependencies {
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.springframework:spring-test:4.2.5.RELEASE'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.jayway.restassured:json-schema-validator:2.9.0'
    testCompile 'com.jayway.restassured:spring-mock-mvc:2.9.0'
    testCompile "org.springframework.restdocs:spring-restdocs-restassured:1.1.0.RC1"

    //maven仓库中心没有的jar，则放入libs目录下
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'org.springframework:spring-webmvc:4.2.5.RELEASE'
    compile 'org.springframework:spring-orm:4.2.5.RELEASE'
    compile 'org.springframework:spring-context-support:4.2.5.RELEASE'
    compile 'mysql:mysql-connector-java:5.1.38'
    compile 'org.mybatis:mybatis:3.4.0'
    compile 'org.mybatis:mybatis-spring:1.3.0'
    compile 'com.github.pagehelper:pagehelper:4.1.3'
    compile 'org.apache.shiro:shiro-spring:1.2.4'
    compile 'org.apache.shiro:shiro-web:1.2.4'


    compile 'org.apache.tomcat:tomcat-jdbc:8.0.33'
    compile 'javax.mail:mail:1.4.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.3'
    compile 'org.aspectj:aspectjweaver:1.8.9'
    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile 'tk.mybatis:mapper:3.3.8'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    
     compile 'javax.servlet:jstl:1.2'
     compile 'taglibs:standard:1.1.2'


    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.7.3'

    //swagger
    compile "io.springfox:springfox-swagger2:2.4.0"
    compile 'io.springfox:springfox-swagger-ui:2.4.0'
    compile 'io.springfox:springfox-staticdocs:2.4.0'

    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:1.1.0.RC1'
    compile 'io.github.robwin:assertj-swagger:0.1.2'
    testCompile 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.4.0'




    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
    mybatisGenerator 'tk.mybatis:mapper:3.3.8'

}





task mybatisGenerate << {
    def prop = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = prop.getProperty('jdbc.driverClassName')
    ant.properties['connectionURL'] = prop.getProperty('jdbc.url')
    ant.properties['userId'] = prop.getProperty('jdbc.user')
    ant.properties['password'] = prop.getProperty('jdbc.pass')
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')

        }
    }
}




